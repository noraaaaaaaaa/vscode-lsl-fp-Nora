{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,SCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCpBA,eACA,QAGA,MAAMQ,EAIL,WAAAC,CAAYC,GAEXC,KAAKD,cAAgBA,EACrBC,KAAKD,cAAcE,WAAW,qCAC9B,IACC,MAAMC,EAAgBC,EAAOC,WAAWC,aAAa,sBAAsBH,cAC3E,QAAsBP,IAAlBO,EAIH,YAFAH,EAAcE,WAAW,yEAK1B,MAAMK,EAAeC,EAAKC,KAAKN,EAAe,WAAY,iBAE1DC,EAAOM,UAAUC,iBAAiBJ,GAAcK,MAAMC,IACrD,IAAIC,EAAcD,EAASE,UAC3Bd,KAAKD,cAAcE,WAAWc,OAAOF,EAAYG,SACjDH,EAAaA,EAAYI,WAAW,MAAO,SAC3CjB,KAAKD,cAAcE,WAAWc,OAAOF,EAAYG,SACjDhB,KAAKkB,SAAWC,KAAKC,MAAMP,GAC3Bb,KAAKD,cAAcE,WAAW,UAAYc,OAAOM,OAAOC,KAAKtB,KAAKkB,UAAUF,QAAU,aAAa,G,CAEnG,MAAOO,GACRC,QAAQD,MAAM,+BAAgCA,E,CAEhD,CAEA,YAAAE,CACCb,EACAc,EACAC,GAEA,MAAMC,EAAYhB,EAASiB,uBAAuBH,GAClD,IAAKE,EACJ,OAGD,MAAME,EAAOlB,EAASE,QAAQc,GAE9B,GAAI5B,KAAKkB,SAASY,IAAS9B,KAAKkB,SAASY,GAAMC,YAAa,CAC3D,MAAMA,EAAc/B,KAAKkB,SAASY,GAAMC,YACxC,OAAO,IAAI5B,EAAO6B,MAAMD,E,CAI1B,EAKD,oBAAyBE,GACxB,IAAIlC,EAAgBI,EAAO+B,OAAOC,oBAAoB,6BACtDF,EAAQG,cAAcC,KAAKtC,GAC3BA,EAAcuC,OACdvC,EAAcE,WAAW,6BACzBuB,QAAQe,IAAI,6DACZpC,EAAO+B,OAAOM,uBAAuB,kCAErC,MAAMC,EAAgB,IAAI5C,EAAqBE,GAC/CkC,EAAQG,cAAcC,KACrBlC,EAAOuC,UAAUC,sBAChB,CAAEC,OAAQ,OAAQC,SAAU,OAC5BJ,IAMFjB,QAAQe,IAAI,iEAKZ,IAAIO,EAAa3C,EAAO4C,SAASC,gBAAgB,2BAA2B,KAG3E7C,EAAO+B,OAAOM,uBAAuB,iCAAiC,IAGvEP,EAAQG,cAAcC,KAAKS,EAC5B,EAIA,wBAA+B,C","sources":["webpack://noras-lsl-fp/external commonjs \"vscode\"","webpack://noras-lsl-fp/external node-commonjs \"path\"","webpack://noras-lsl-fp/webpack/bootstrap","webpack://noras-lsl-fp/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nclass SnippetHoverProvider implements vscode.HoverProvider {\n\tsnippets: any;\n\toutputChannel: vscode.OutputChannel;\n\n\tconstructor(outputChannel: vscode.OutputChannel) {\n\n\t\tthis.outputChannel = outputChannel;\n\t\tthis.outputChannel.appendLine(\"SnippetHoverProvider instantiated\");\n\t\ttry {\n\t\t\tconst extensionPath = vscode.extensions.getExtension('Nora.noras-lsl-fp')?.extensionPath;\n\t\t\tif (extensionPath === undefined)\n\t\t\t{\n\t\t\t\toutputChannel.appendLine(\"wtf? cant use snippet hover provider due to extension not being found\");\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst snippetsPath = path.join(extensionPath, \"snippets\", 'snippets.json'); // Update the path accordingly\n\t\t\t\n\t\t\tvscode.workspace.openTextDocument(snippetsPath).then((document) => {\n\t\t\t\tlet snippetText = document.getText();\n\t\t\t\tthis.outputChannel.appendLine(String(snippetText.length));\n\t\t\t\tsnippetText =snippetText.replaceAll('\\\\n', '  \\\\n');\n\t\t\t\tthis.outputChannel.appendLine(String(snippetText.length));\n\t\t\t\tthis.snippets = JSON.parse(snippetText);\n\t\t\t\tthis.outputChannel.appendLine(\"Loaded \" + String(Object.keys(this.snippets).length) + \" snippets.\")\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error('Error reading snippets.json:', error);\n\t\t}\n\t}\n\n\tprovideHover(\n\t\tdocument: vscode.TextDocument,\n\t\tposition: vscode.Position,\n\t\ttoken: vscode.CancellationToken\n\t): vscode.ProviderResult<vscode.Hover> {\n\t\tconst wordRange = document.getWordRangeAtPosition(position);\n\t\tif (!wordRange) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst word = document.getText(wordRange);\n\n\t\tif (this.snippets[word] && this.snippets[word].description) {\n\t\t\tconst description = this.snippets[word].description;\n\t\t\treturn new vscode.Hover(description);\n\t\t}\n\n\t\treturn;\n\t}\n}\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\tlet outputChannel = vscode.window.createOutputChannel('Noras LSL-FP Debug Output');\n\tcontext.subscriptions.push(outputChannel);\n\toutputChannel.show();\n\toutputChannel.appendLine(\"Noras LSL-FP instantiated\");\n\tconsole.log('Congratulations, your extension \"star-rod\" is now active!');\n\tvscode.window.showInformationMessage('Hello World from Noras LSL-FP!');\n\n\tconst hoverProvider = new SnippetHoverProvider(outputChannel);\n\tcontext.subscriptions.push(\n\t\tvscode.languages.registerHoverProvider(\n\t\t\t{ scheme: 'file', language: 'lsl' },\n\t\t\thoverProvider\n\t\t)\n\t);\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"noras-lsl-fp\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('noras-lsl-fp.helloWorld', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Hello World from Noras LSL-FP!');\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\n\n// This method is called when your extension is deactivated\nexport function deactivate() { }\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","SnippetHoverProvider","constructor","outputChannel","this","appendLine","extensionPath","vscode","extensions","getExtension","snippetsPath","path","join","workspace","openTextDocument","then","document","snippetText","getText","String","length","replaceAll","snippets","JSON","parse","Object","keys","error","console","provideHover","position","token","wordRange","getWordRangeAtPosition","word","description","Hover","context","window","createOutputChannel","subscriptions","push","show","log","showInformationMessage","hoverProvider","languages","registerHoverProvider","scheme","language","disposable","commands","registerCommand"],"sourceRoot":""}